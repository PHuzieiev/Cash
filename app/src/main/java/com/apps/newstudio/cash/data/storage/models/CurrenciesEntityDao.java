package com.apps.newstudio.cash.data.storage.models;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CURRENCIES".
*/
public class CurrenciesEntityDao extends AbstractDao<CurrenciesEntity, String> {

    public static final String TABLENAME = "CURRENCIES";

    /**
     * Properties of entity CurrenciesEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property OrganizationId = new Property(1, String.class, "organizationId", false, "ORGANIZATION_ID");
        public final static Property TitleUkr = new Property(2, String.class, "titleUkr", false, "TITLE_UKR");
        public final static Property TitleRus = new Property(3, String.class, "titleRus", false, "TITLE_RUS");
        public final static Property TitleEng = new Property(4, String.class, "titleEng", false, "TITLE_ENG");
        public final static Property Ask = new Property(5, String.class, "ask", false, "ASK");
        public final static Property Bid = new Property(6, String.class, "bid", false, "BID");
        public final static Property Date = new Property(7, String.class, "date", false, "DATE");
    }

    private DaoSession daoSession;

    private Query<CurrenciesEntity> organizationsEntity_CurrenciesQuery;

    public CurrenciesEntityDao(DaoConfig config) {
        super(config);
    }
    
    public CurrenciesEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CURRENCIES\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"ORGANIZATION_ID\" TEXT NOT NULL ," + // 1: organizationId
                "\"TITLE_UKR\" TEXT," + // 2: titleUkr
                "\"TITLE_RUS\" TEXT," + // 3: titleRus
                "\"TITLE_ENG\" TEXT," + // 4: titleEng
                "\"ASK\" TEXT," + // 5: ask
                "\"BID\" TEXT," + // 6: bid
                "\"DATE\" TEXT);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CURRENCIES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CurrenciesEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getOrganizationId());
 
        String titleUkr = entity.getTitleUkr();
        if (titleUkr != null) {
            stmt.bindString(3, titleUkr);
        }
 
        String titleRus = entity.getTitleRus();
        if (titleRus != null) {
            stmt.bindString(4, titleRus);
        }
 
        String titleEng = entity.getTitleEng();
        if (titleEng != null) {
            stmt.bindString(5, titleEng);
        }
 
        String ask = entity.getAsk();
        if (ask != null) {
            stmt.bindString(6, ask);
        }
 
        String bid = entity.getBid();
        if (bid != null) {
            stmt.bindString(7, bid);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CurrenciesEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
        stmt.bindString(2, entity.getOrganizationId());
 
        String titleUkr = entity.getTitleUkr();
        if (titleUkr != null) {
            stmt.bindString(3, titleUkr);
        }
 
        String titleRus = entity.getTitleRus();
        if (titleRus != null) {
            stmt.bindString(4, titleRus);
        }
 
        String titleEng = entity.getTitleEng();
        if (titleEng != null) {
            stmt.bindString(5, titleEng);
        }
 
        String ask = entity.getAsk();
        if (ask != null) {
            stmt.bindString(6, ask);
        }
 
        String bid = entity.getBid();
        if (bid != null) {
            stmt.bindString(7, bid);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    protected final void attachEntity(CurrenciesEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public CurrenciesEntity readEntity(Cursor cursor, int offset) {
        CurrenciesEntity entity = new CurrenciesEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.getString(offset + 1), // organizationId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleUkr
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titleRus
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // titleEng
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // ask
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // bid
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CurrenciesEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setOrganizationId(cursor.getString(offset + 1));
        entity.setTitleUkr(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitleRus(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTitleEng(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setAsk(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBid(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(CurrenciesEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(CurrenciesEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CurrenciesEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "currencies" to-many relationship of OrganizationsEntity. */
    public List<CurrenciesEntity> _queryOrganizationsEntity_Currencies(String organizationId) {
        synchronized (this) {
            if (organizationsEntity_CurrenciesQuery == null) {
                QueryBuilder<CurrenciesEntity> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.OrganizationId.eq(null));
                organizationsEntity_CurrenciesQuery = queryBuilder.build();
            }
        }
        Query<CurrenciesEntity> query = organizationsEntity_CurrenciesQuery.forCurrentThread();
        query.setParameter(0, organizationId);
        return query.list();
    }

}
