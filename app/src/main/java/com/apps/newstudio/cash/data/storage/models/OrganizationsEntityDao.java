package com.apps.newstudio.cash.data.storage.models;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORGANIZATIONS".
*/
public class OrganizationsEntityDao extends AbstractDao<OrganizationsEntity, String> {

    public static final String TABLENAME = "ORGANIZATIONS";

    /**
     * Properties of entity OrganizationsEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, String.class, "id", true, "ID");
        public final static Property TitleUkr = new Property(1, String.class, "titleUkr", false, "TITLE_UKR");
        public final static Property TitleRus = new Property(2, String.class, "titleRus", false, "TITLE_RUS");
        public final static Property TitleEng = new Property(3, String.class, "titleEng", false, "TITLE_ENG");
        public final static Property OrgType = new Property(4, String.class, "orgType", false, "ORG_TYPE");
        public final static Property Phone = new Property(5, String.class, "phone", false, "PHONE");
        public final static Property Link = new Property(6, String.class, "link", false, "LINK");
        public final static Property Date = new Property(7, String.class, "date", false, "DATE");
    }

    private DaoSession daoSession;


    public OrganizationsEntityDao(DaoConfig config) {
        super(config);
    }
    
    public OrganizationsEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORGANIZATIONS\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: id
                "\"TITLE_UKR\" TEXT," + // 1: titleUkr
                "\"TITLE_RUS\" TEXT," + // 2: titleRus
                "\"TITLE_ENG\" TEXT," + // 3: titleEng
                "\"ORG_TYPE\" TEXT," + // 4: orgType
                "\"PHONE\" TEXT," + // 5: phone
                "\"LINK\" TEXT," + // 6: link
                "\"DATE\" TEXT);"); // 7: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORGANIZATIONS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrganizationsEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String titleUkr = entity.getTitleUkr();
        if (titleUkr != null) {
            stmt.bindString(2, titleUkr);
        }
 
        String titleRus = entity.getTitleRus();
        if (titleRus != null) {
            stmt.bindString(3, titleRus);
        }
 
        String titleEng = entity.getTitleEng();
        if (titleEng != null) {
            stmt.bindString(4, titleEng);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(5, orgType);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrganizationsEntity entity) {
        stmt.clearBindings();
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(1, id);
        }
 
        String titleUkr = entity.getTitleUkr();
        if (titleUkr != null) {
            stmt.bindString(2, titleUkr);
        }
 
        String titleRus = entity.getTitleRus();
        if (titleRus != null) {
            stmt.bindString(3, titleRus);
        }
 
        String titleEng = entity.getTitleEng();
        if (titleEng != null) {
            stmt.bindString(4, titleEng);
        }
 
        String orgType = entity.getOrgType();
        if (orgType != null) {
            stmt.bindString(5, orgType);
        }
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(6, phone);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(7, link);
        }
 
        String date = entity.getDate();
        if (date != null) {
            stmt.bindString(8, date);
        }
    }

    @Override
    protected final void attachEntity(OrganizationsEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public OrganizationsEntity readEntity(Cursor cursor, int offset) {
        OrganizationsEntity entity = new OrganizationsEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // titleUkr
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titleRus
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // titleEng
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // orgType
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phone
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // link
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrganizationsEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTitleUkr(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setTitleRus(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setTitleEng(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOrgType(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhone(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setLink(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setDate(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final String updateKeyAfterInsert(OrganizationsEntity entity, long rowId) {
        return entity.getId();
    }
    
    @Override
    public String getKey(OrganizationsEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrganizationsEntity entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
